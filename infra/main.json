{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "4493377169778725531"
    }
  },
  "parameters": {
    "namePrefix": {
      "type": "string",
      "minLength": 3,
      "maxLength": 12,
      "metadata": {
        "description": "Prefix applied to most resource names."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for all resources."
      }
    },
    "pdsHostname": {
      "type": "string",
      "minLength": 4,
      "maxLength": 253,
      "metadata": {
        "description": "Fully qualified hostname clients use to reach the PDS (e.g. pds.example.com)."
      }
    },
    "pdsImageTag": {
      "type": "string",
      "minLength": 1,
      "maxLength": 128,
      "metadata": {
        "description": "Container image tag for ghcr.io/bluesky-social/pds (e.g. 0.4)."
      }
    },
    "caddyImage": {
      "type": "string",
      "defaultValue": "caddy:2",
      "metadata": {
        "description": "Optional override for the Caddy container image."
      }
    },
    "pdsCpu": {
      "type": "string",
      "defaultValue": "0.5",
      "metadata": {
        "description": "CPU request for the PDS container in cores."
      }
    },
    "pdsMemory": {
      "type": "string",
      "defaultValue": "1Gi",
      "metadata": {
        "description": "Memory request for the PDS container."
      }
    },
    "caddyCpu": {
      "type": "string",
      "defaultValue": "0.25",
      "metadata": {
        "description": "CPU request for the Caddy container in cores."
      }
    },
    "caddyMemory": {
      "type": "string",
      "defaultValue": "0.5Gi",
      "metadata": {
        "description": "Memory request for the Caddy container."
      }
    },
    "minReplicas": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Minimum number of replicas the container app should maintain."
      }
    },
    "maxReplicas": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Maximum number of replicas the container app may scale to."
      }
    },
    "pdsJwtSecretName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 127,
      "metadata": {
        "description": "Name of the Key Vault secret containing the PDS JWT secret."
      }
    },
    "pdsAdminPasswordSecretName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 127,
      "metadata": {
        "description": "Name of the Key Vault secret containing the PDS admin password."
      }
    },
    "pdsPlcRotationKeySecretName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 127,
      "metadata": {
        "description": "Name of the Key Vault secret containing the PLC rotation key (hex)."
      }
    },
    "smtpSecretName": {
      "type": "string",
      "defaultValue": "PDS-SMTP-URL",
      "minLength": 1,
      "maxLength": 127,
      "metadata": {
        "description": "Name of the Key Vault secret containing the SMTP connection string or password."
      }
    },
    "emailFromAddressSecretName": {
      "type": "string",
      "defaultValue": "PDS-EMAIL-FROM-ADDRESS",
      "minLength": 1,
      "maxLength": 127,
      "metadata": {
        "description": "Name of the Key Vault secret containing the computed email from address."
      }
    },
    "emailFromAddress": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 320,
      "metadata": {
        "description": "From address to use when PDS sends email. Leave empty to auto-use Azure-managed domain when enableCommunicationServices=true."
      }
    },
    "enableCommunicationServices": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to provision Azure Communication Services for email sending."
      }
    },
    "emailCustomDomain": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 253,
      "metadata": {
        "description": "Custom domain name for Azure Communication Services Email (e.g. notify.example.com). Leave empty to use Azure-managed domain."
      }
    },
    "adminObjectId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "Object ID for an administrator that should have full access to the Key Vault."
      }
    },
    "fileShareQuotaGiB": {
      "type": "int",
      "defaultValue": 256,
      "minValue": 1,
      "maxValue": 102400,
      "metadata": {
        "description": "Quota in GiB allocated to the Azure Files share that stores PDS state."
      }
    },
    "dnsZoneName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 253,
      "metadata": {
        "description": "Optional DNS zone name (e.g. example.com). Leave empty to skip DNS record creation."
      }
    },
    "dnsRecordName": {
      "type": "string",
      "defaultValue": "pds",
      "minLength": 1,
      "maxLength": 63,
      "metadata": {
        "description": "Optional relative record for the container app within the DNS zone (e.g. pds). Ignored when dnsZoneName is empty."
      }
    },
    "logAnalyticsRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 7,
      "maxValue": 730,
      "metadata": {
        "description": "Retention in days for Log Analytics data."
      }
    },
    "maintenanceWindow": {
      "type": "string",
      "defaultValue": "Sun 02:00",
      "minLength": 7,
      "maxLength": 10,
      "metadata": {
        "description": "Maintenance window for backup operations (e.g., \"Sun 02:00\")."
      }
    },
    "backupRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 7,
      "maxValue": 365,
      "metadata": {
        "description": "Retention in days for Azure Files snapshots."
      }
    },
    "baseDateTime": {
      "type": "string",
      "defaultValue": "[utcNow('yyyy-MM-dd')]",
      "metadata": {
        "description": "Base date for schedule calculation."
      }
    },
    "backupRunbookContentUri": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/bluesky-social/azure-pds/main/scripts/runbooks/BackupPdsFiles.ps1",
      "metadata": {
        "description": "URI hosting the Automation runbook PowerShell script."
      }
    },
    "backupRunbookContentHash": {
      "type": "string",
      "defaultValue": "40b3063d62778cebaf5390b6fdfaf2e2d9f9470a7e838e7615676ca273b6656d",
      "metadata": {
        "description": "SHA256 hash of the Automation runbook script content."
      }
    }
  },
  "variables": {
    "tenantId": "[subscription().tenantId]",
    "pdsImage": "[format('ghcr.io/bluesky-social/pds:{0}', parameters('pdsImageTag'))]",
    "cleanedNamePrefix": "[replace(format('{0}{1}', parameters('namePrefix'), uniqueString(resourceGroup().id)), '-', '')]",
    "storageAccountName": "[toLower(if(greater(length(variables('cleanedNamePrefix')), 24), substring(variables('cleanedNamePrefix'), 0, 24), variables('cleanedNamePrefix')))]",
    "containerAppName": "[format('{0}-pds-app', parameters('namePrefix'))]",
    "containerAppIdentityName": "[format('{0}-pds-id', parameters('namePrefix'))]",
    "keyVaultName": "[format('{0}-{1}-kv', parameters('namePrefix'), uniqueString(resourceGroup().id))]",
    "logAnalyticsName": "[format('{0}-law', parameters('namePrefix'))]",
    "managedEnvName": "[format('{0}-cae', parameters('namePrefix'))]",
    "automationAccountName": "[format('{0}-auto', parameters('namePrefix'))]",
    "runbookName": "BackupPdsFiles",
    "scheduleName": "DailyBackupSchedule",
    "fileShareName": "pds",
    "storageShareStorageName": "pdsfiles",
    "storageAccountKeySecretName": "storage-account-key",
    "communicationServiceName": "[format('{0}-acs', parameters('namePrefix'))]",
    "emailServiceName": "[format('{0}-email', parameters('namePrefix'))]",
    "hasEmailFromOverride": "[greater(length(parameters('emailFromAddress')), 0)]",
    "includeSmtpSecret": "[greater(length(parameters('smtpSecretName')), 0)]",
    "maintenanceParts": "[split(parameters('maintenanceWindow'), ' ')]",
    "maintenanceTimePart": "[if(greater(length(variables('maintenanceParts')), 1), variables('maintenanceParts')[1], parameters('maintenanceWindow'))]",
    "maintenanceTimeSegments": "[split(variables('maintenanceTimePart'), ':')]",
    "maintenanceHour": "[padLeft(variables('maintenanceTimeSegments')[0], 2, '0')]",
    "maintenanceMinute": "[padLeft(if(greater(length(variables('maintenanceTimeSegments')), 1), variables('maintenanceTimeSegments')[1], '00'), 2, '0')]",
    "scheduleStartTime": "[dateTimeAdd(format('{0}T{1}:{2}:00.000Z', parameters('baseDateTime'), variables('maintenanceHour'), variables('maintenanceMinute')), 'P2D')]",
    "computedEmailFromAddress": "[if(variables('hasEmailFromOverride'), parameters('emailFromAddress'), if(and(parameters('enableCommunicationServices'), not(equals(parameters('emailCustomDomain'), ''))), format('donotreply@{0}', parameters('emailCustomDomain')), if(parameters('enableCommunicationServices'), 'donotreply@placeholder.azurecomm.net', 'donotreply@example.com')))]",
    "smtpPlaceholderValue": "smtps://pending-update@smtp.azurecomm.net:587",
    "backupRunbookContentLink": {
      "uri": "[parameters('backupRunbookContentUri')]",
      "contentHash": {
        "algorithm": "sha256",
        "value": "[parameters('backupRunbookContentHash')]"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[variables('containerAppIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "properties": {
        "retentionInDays": "[parameters('logAnalyticsRetentionDays')]",
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        },
        "sku": {
          "name": "PerGB2018"
        }
      }
    },
    {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2023-05-01",
      "name": "[variables('managedEnvName')]",
      "location": "[parameters('location')]",
      "properties": {
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')), '2022-10-01').customerId]",
            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')), '2022-10-01').primarySharedKey]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ]
    },
    {
      "type": "Microsoft.App/managedEnvironments/storages",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}', variables('managedEnvName'), variables('storageShareStorageName'))]",
      "properties": {
        "azureFile": {
          "accountName": "[variables('storageAccountName')]",
          "shareName": "[variables('fileShareName')]",
          "accessMode": "ReadWrite",
          "accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', variables('managedEnvName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false,
        "allowSharedKeyAccess": true
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/default/{1}', variables('storageAccountName'), variables('fileShareName'))]",
      "properties": {
        "shareQuota": "[parameters('fileShareQuotaGiB')]",
        "enabledProtocols": "SMB"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[variables('tenantId')]",
        "sku": {
          "name": "standard",
          "family": "A"
        },
        "enablePurgeProtection": true,
        "enabledForTemplateDeployment": true,
        "accessPolicies": [
          {
            "tenantId": "[variables('tenantId')]",
            "objectId": "[parameters('adminObjectId')]",
            "permissions": {
              "secrets": [
                "get",
                "list",
                "set",
                "delete",
                "recover",
                "backup",
                "restore"
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-01",
      "name": "[variables('containerAppName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('containerAppIdentityName')))]": {}
        }
      },
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', variables('managedEnvName'))]",
        "configuration": {
          "activeRevisionsMode": "Single",
          "ingress": {
            "external": true,
            "targetPort": 443,
            "allowInsecure": true,
            "transport": "auto",
            "traffic": [
              {
                "latestRevision": true,
                "weight": 100
              }
            ]
          },
          "secrets": "[concat(createArray(createObject('name', 'pds-jwt-secret', 'keyVaultUrl', format('{0}secrets/{1}', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-07-01').vaultUri, parameters('pdsJwtSecretName')), 'identity', 'userAssigned'), createObject('name', 'pds-admin-password', 'keyVaultUrl', format('{0}secrets/{1}', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-07-01').vaultUri, parameters('pdsAdminPasswordSecretName')), 'identity', 'userAssigned'), createObject('name', 'pds-plc-key', 'keyVaultUrl', format('{0}secrets/{1}', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-07-01').vaultUri, parameters('pdsPlcRotationKeySecretName')), 'identity', 'userAssigned'), createObject('name', 'pds-email-from-address', 'keyVaultUrl', format('{0}secrets/{1}', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-07-01').vaultUri, parameters('emailFromAddressSecretName')), 'identity', 'userAssigned')), if(variables('includeSmtpSecret'), createArray(createObject('name', 'pds-smtp-secret', 'keyVaultUrl', format('{0}secrets/{1}', reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-07-01').vaultUri, parameters('smtpSecretName')), 'identity', 'userAssigned')), createArray()))]"
        },
        "template": {
          "revisionSuffix": "[toLower(format('r{0}', uniqueString(variables('pdsImage'))))]",
          "containers": [
            {
              "name": "caddy",
              "image": "[parameters('caddyImage')]",
              "resources": {
                "cpu": "[json(parameters('caddyCpu'))]",
                "memory": "[parameters('caddyMemory')]"
              },
              "volumeMounts": [
                {
                  "volumeName": "[variables('storageShareStorageName')]",
                  "mountPath": "/pds"
                }
              ],
              "env": [
                {
                  "name": "ACME_AGREE",
                  "value": "true"
                },
                {
                  "name": "PDS_HOSTNAME",
                  "value": "[parameters('pdsHostname')]"
                }
              ]
            },
            {
              "name": "pds",
              "image": "[variables('pdsImage')]",
              "resources": {
                "cpu": "[json(parameters('pdsCpu'))]",
                "memory": "[parameters('pdsMemory')]"
              },
              "volumeMounts": [
                {
                  "volumeName": "[variables('storageShareStorageName')]",
                  "mountPath": "/pds"
                }
              ],
              "env": "[concat(createArray(createObject('name', 'PDS_PORT', 'value', '2583'), createObject('name', 'PDS_HOSTNAME', 'value', parameters('pdsHostname')), createObject('name', 'PDS_DATA_DIRECTORY', 'value', '/pds'), createObject('name', 'PDS_ACTOR_STORE_DIRECTORY', 'value', '/pds/actors'), createObject('name', 'PDS_BLOBSTORE_DISK_LOCATION', 'value', '/pds/blobs'), createObject('name', 'PDS_BLOBSTORE_DISK_TMP_LOCATION', 'value', '/pds/blobs/tmp'), createObject('name', 'PDS_SQLITE_DISABLE_WAL_AUTO_CHECKPOINT', 'value', 'true'), createObject('name', 'PDS_EMAIL_FROM_ADDRESS', 'secretRef', 'pds-email-from-address'), createObject('name', 'PDS_JWT_SECRET', 'secretRef', 'pds-jwt-secret'), createObject('name', 'PDS_ADMIN_PASSWORD', 'secretRef', 'pds-admin-password'), createObject('name', 'PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX', 'secretRef', 'pds-plc-key')), if(variables('includeSmtpSecret'), createArray(createObject('name', 'PDS_EMAIL_SMTP_URL', 'secretRef', 'pds-smtp-secret')), createArray()))]"
            }
          ],
          "scale": {
            "minReplicas": "[parameters('minReplicas')]",
            "maxReplicas": "[parameters('maxReplicas')]"
          },
          "volumes": [
            {
              "name": "[variables('storageShareStorageName')]",
              "storageType": "AzureFile",
              "storageName": "[variables('storageShareStorageName')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('containerAppIdentityName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), parameters('emailFromAddressSecretName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', variables('keyVaultName'), 'add')]",
        "[resourceId('Microsoft.App/managedEnvironments', variables('managedEnvName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), parameters('smtpSecretName'))]",
        "[resourceId('Microsoft.App/managedEnvironments/storages', variables('managedEnvName'), variables('storageShareStorageName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'add')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[variables('tenantId')]",
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('containerAppIdentityName')), '2018-11-30').principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('containerAppIdentityName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.App/containerApps/{0}', variables('containerAppName'))]",
      "name": "[format('{0}-metrics', variables('containerAppName'))]",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]",
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerApps', variables('containerAppName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts",
      "apiVersion": "2023-11-01",
      "name": "[variables('automationAccountName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "sku": {
          "name": "Basic"
        },
        "encryption": {
          "keySource": "Microsoft.Automation"
        }
      }
    },
    {
      "type": "Microsoft.Automation/automationAccounts/runbooks",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}/{1}', variables('automationAccountName'), variables('runbookName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "runbookType": "PowerShell",
        "description": "Creates daily snapshots of the PDS Azure Files share and manages retention",
        "publishContentLink": {
          "uri": "[variables('backupRunbookContentLink').uri]",
          "contentHash": "[variables('backupRunbookContentLink').contentHash]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/schedules",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}/{1}', variables('automationAccountName'), variables('scheduleName'))]",
      "properties": {
        "frequency": "Day",
        "interval": 1,
        "startTime": "[variables('scheduleStartTime')]",
        "timeZone": "UTC",
        "description": "Daily backup schedule for PDS files"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Automation/automationAccounts/jobSchedules",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}/{1}', variables('automationAccountName'), guid(resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName')), resourceId('Microsoft.Automation/automationAccounts/runbooks', variables('automationAccountName'), variables('runbookName')), resourceId('Microsoft.Automation/automationAccounts/schedules', variables('automationAccountName'), variables('scheduleName'))))]",
      "properties": {
        "runbook": {
          "name": "[variables('runbookName')]"
        },
        "schedule": {
          "name": "[variables('scheduleName')]"
        },
        "parameters": {
          "StorageAccountName": "[variables('storageAccountName')]",
          "ShareName": "[variables('fileShareName')]",
          "RetentionDays": "[string(parameters('backupRetentionDays'))]",
          "ResourceGroupName": "[resourceGroup().name]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/runbooks', variables('automationAccountName'), variables('runbookName'))]",
        "[resourceId('Microsoft.Automation/automationAccounts/schedules', variables('automationAccountName'), variables('scheduleName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('storageAccountName'))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName')), 'ba92f5b4-2d11-453d-a403-e96b0029c9fe', 'storage')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName')), '2023-11-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('storageAccountKeySecretName'))]",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultName'))]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName')), '4633458b-17de-408a-b874-0445c86b69e6', 'automation')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalId": "[reference(resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName')), '2023-11-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', variables('automationAccountName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultName'))]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), resourceId('Microsoft.App/containerApps', variables('containerAppName')), '4633458b-17de-408a-b874-0445c86b69e6', 'containerapp')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('containerAppIdentityName')), '2018-11-30').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerApps', variables('containerAppName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('containerAppIdentityName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "condition": "[parameters('enableCommunicationServices')]",
      "type": "Microsoft.Communication/emailServices",
      "apiVersion": "2023-04-01",
      "name": "[variables('emailServiceName')]",
      "location": "global",
      "properties": {
        "dataLocation": "United States"
      }
    },
    {
      "condition": "[and(parameters('enableCommunicationServices'), equals(parameters('emailCustomDomain'), ''))]",
      "type": "Microsoft.Communication/emailServices/domains",
      "apiVersion": "2023-04-01",
      "name": "[format('{0}/{1}', variables('emailServiceName'), 'AzureManagedDomain')]",
      "location": "global",
      "properties": {
        "domainManagement": "AzureManaged"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Communication/emailServices', variables('emailServiceName'))]"
      ]
    },
    {
      "condition": "[and(parameters('enableCommunicationServices'), not(equals(parameters('emailCustomDomain'), '')))]",
      "type": "Microsoft.Communication/emailServices/domains",
      "apiVersion": "2023-04-01",
      "name": "[format('{0}/{1}', variables('emailServiceName'), parameters('emailCustomDomain'))]",
      "location": "global",
      "properties": {
        "domainManagement": "CustomerManaged"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Communication/emailServices', variables('emailServiceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableCommunicationServices')]",
      "type": "Microsoft.Communication/communicationServices",
      "apiVersion": "2023-04-01",
      "name": "[variables('communicationServiceName')]",
      "location": "global",
      "properties": {
        "dataLocation": "United States",
        "linkedDomains": [
          "[if(equals(parameters('emailCustomDomain'), ''), resourceId('Microsoft.Communication/emailServices/domains', variables('emailServiceName'), 'AzureManagedDomain'), resourceId('Microsoft.Communication/emailServices/domains', variables('emailServiceName'), parameters('emailCustomDomain')))]"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Communication/emailServices/domains', variables('emailServiceName'), parameters('emailCustomDomain'))]",
        "[resourceId('Microsoft.Communication/emailServices/domains', variables('emailServiceName'), 'AzureManagedDomain')]"
      ]
    },
    {
      "condition": "[not(equals(parameters('dnsZoneName'), ''))]",
      "type": "Microsoft.Network/dnsZones",
      "apiVersion": "2023-07-01-preview",
      "name": "[parameters('dnsZoneName')]",
      "location": "global"
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), parameters('emailFromAddressSecretName'))]",
      "properties": {
        "value": "[variables('computedEmailFromAddress')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "condition": "[parameters('enableCommunicationServices')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), parameters('smtpSecretName'))]",
      "properties": {
        "value": "[variables('smtpPlaceholderValue')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "condition": "[not(equals(parameters('dnsZoneName'), ''))]",
      "type": "Microsoft.Network/dnsZones/CNAME",
      "apiVersion": "2023-07-01-preview",
      "name": "[format('{0}/{1}', parameters('dnsZoneName'), parameters('dnsRecordName'))]",
      "properties": {
        "TTL": 300,
        "CNAMERecord": {
          "cname": "[reference(resourceId('Microsoft.App/containerApps', variables('containerAppName')), '2023-05-01').configuration.ingress.fqdn]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerApps', variables('containerAppName'))]",
        "[resourceId('Microsoft.Network/dnsZones', parameters('dnsZoneName'))]"
      ]
    },
    {
      "condition": "[not(equals(parameters('dnsZoneName'), ''))]",
      "type": "Microsoft.Network/dnsZones/CNAME",
      "apiVersion": "2023-07-01-preview",
      "name": "[format('{0}/{1}', parameters('dnsZoneName'), format('*.{0}', parameters('dnsRecordName')))]",
      "properties": {
        "TTL": 300,
        "CNAMERecord": {
          "cname": "[reference(resourceId('Microsoft.App/containerApps', variables('containerAppName')), '2023-05-01').configuration.ingress.fqdn]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerApps', variables('containerAppName'))]",
        "[resourceId('Microsoft.Network/dnsZones', parameters('dnsZoneName'))]"
      ]
    }
  ],
  "outputs": {
    "containerAppName": {
      "type": "string",
      "value": "[variables('containerAppName')]"
    },
    "containerAppFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.App/containerApps', variables('containerAppName')), '2023-05-01').configuration.ingress.fqdn]"
    },
    "storageAccountId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
    },
    "fileSharePath": {
      "type": "string",
      "value": "[format('{0}/default/{1}', variables('storageAccountName'), variables('fileShareName'))]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), '2023-07-01').vaultUri]"
    },
    "automationAccountName": {
      "type": "string",
      "value": "[variables('automationAccountName')]"
    },
    "automationRunbookId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Automation/automationAccounts/runbooks', variables('automationAccountName'), variables('runbookName'))]"
    },
    "backupScheduleName": {
      "type": "string",
      "value": "[variables('scheduleName')]"
    },
    "communicationServiceEndpoint": {
      "type": "string",
      "value": "[if(parameters('enableCommunicationServices'), reference(resourceId('Microsoft.Communication/communicationServices', variables('communicationServiceName')), '2023-04-01').hostName, '')]"
    },
    "emailServiceName": {
      "type": "string",
      "value": "[if(parameters('enableCommunicationServices'), variables('emailServiceName'), '')]"
    },
    "smtpServer": {
      "type": "string",
      "value": "smtp.azurecomm.net"
    },
    "smtpPort": {
      "type": "int",
      "value": 587
    },
    "communicationServiceResourceId": {
      "type": "string",
      "value": "[if(parameters('enableCommunicationServices'), resourceId('Microsoft.Communication/communicationServices', variables('communicationServiceName')), '')]"
    },
    "emailDomainResourceId": {
      "type": "string",
      "value": "[if(parameters('enableCommunicationServices'), if(equals(parameters('emailCustomDomain'), ''), resourceId('Microsoft.Communication/emailServices/domains', variables('emailServiceName'), 'AzureManagedDomain'), resourceId('Microsoft.Communication/emailServices/domains', variables('emailServiceName'), parameters('emailCustomDomain'))), '')]"
    },
    "emailFromAddress": {
      "type": "string",
      "value": "[variables('computedEmailFromAddress')]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    }
  }
}